%YAML 1.2
%TAG ! tag:fawkesrobotics.org,cfg/
---
# Configuration meta information document
include:
  # reads files ending in .yaml from conf.d config subdir
  # - !ignore-missing conf.d/
  # Reads the host-specific configuration file, no failure if missing
  - !host-specific host.yaml
---
# Main configuration document

llsfrb:
  log:
    level: info
    general: refbox.log
    clips: clips.log
    game: game.log
    mps_dir: mps

  mps:
    enable: true
    stations:
      C-BS:
        active: true
        type: BS
        host: !ipv4 192.168.2.27
        port: !tcp-port 4840
        connection: mockup
      C-CS1:
        active: true
        host: !ipv4 192.168.2.24
        port: !tcp-port 4840
        type: CS
        connection: mockup
      C-CS2:
        active: true
        host: !ipv4 192.168.2.25
        port: !tcp-port 4840
        type: CS
        connection: mockup
      C-RS1:
        active: true
        host: !ipv4 192.168.2.23
        port: !tcp-port 4840
        type: RS
        connection: mockup
      C-RS2:
        active: true
        host: !ipv4 192.168.2.26
        port: !tcp-port 4840
        type: RS
        connection: mockup
      C-DS:
        active: true
        host: !ipv4 192.168.2.28
        port: !tcp-port 4840
        type: DS
        connection: mockup
      C-SS:
        active: true
        host: !ipv4 192.168.2.22
        port: !tcp-port 4840
        type: SS
        connection: mockup
      M-BS:
        active: true
        host: !ipv4 192.168.2.33
        port: !tcp-port 4840
        type: BS
        connection: mockup
      M-CS1:
        active: true
        host: !ipv4 192.168.2.30
        port: !tcp-port 4840
        type: CS
        connection: mockup
      M-CS2:
        active: true
        host: !ipv4 192.168.2.32
        port: !tcp-port 4840
        type: CS
        connection: mockup
      M-RS1:
        active: true
        host: !ipv4 192.168.2.31
        port: !tcp-port 4840
        type: RS
        connection: mockup
      M-RS2:
        active: true
        host: !ipv4 192.168.2.34
        port: !tcp-port 4840
        type: RS
        connection: mockup
      M-DS:
        active: true
        host: !ipv4 192.168.2.29
        port: !tcp-port 4840
        type: DS
        connection: mockup
      M-SS:
        active: true
        host: !ipv4 192.168.2.35
        port: !tcp-port 4840
        type: SS
        connection: mockup

  clips:
    # Timer interval, in milliseconds
    timer-interval: 40

    main: refbox
    debug: true
    # debug levels: 0 ~ none, 1 ~ minimal, 2 ~ more, 3 ~ maximum
    debug-level: 2
    unwatch-facts: [time, signal, gamestate]
    unwatch-rules: [retract-time,
                    game-update-gametime-points, game-update-last-time,
                    net-send-beacon, net-send-GameState, net-send-OrderInfo,
                    net-send-MachineInfo, net-send-RobotInfo,
                    exploration-send-MachineReportInfo,
                    net-broadcast-MachineInfo, net-send-VersionInfo]

  comm:
    protobuf-dirs: ["@SHAREDIR@/msgs"]

    server-port: !tcp-port 4444

    public-peer:
      # host: !ipv4 192.168.122.255
      host: !ipv4 192.168.255.255
      # host: !ipv4 127.0.0.1
      port: !udp-port 4444
      # send-port: !udp-port 4444
      # recv-port: !udp-port 4445

    cyan-peer:
      # host: !ipv4 192.168.122.255
      host: !ipv4 192.168.255.255
      # host: !ipv4 127.0.0.1
      port: !udp-port 4441
      # send-port: !udp-port 4441
      # recv-port: !udp-port 4446

    magenta-peer:
      # host: !ipv4 192.168.122.255
      host: !ipv4 192.168.255.255
      # host: !ipv4 127.0.0.1
      port: !udp-port 4442
      # send-port: !udp-port 4442
      # recv-port: !udp-port 4447

  mongodb:
    enable: true
    hostport: localhost
    collections:
      text-log: log
      clips-log: clipslog
      protobuf: protobuf

  game:
    teams: [Carologistics,BabyTigers]
    crypto-keys:
      Carologistics: randomkey
      BabyTigers: randomkey
    # set to true to generate a random field at startup
    # disabling randomization requires mongodb to be enabled as the game
    # parameters are loaded from a mongodb game report in this case
    random-field: false
    # If enabled, some machines will randomly go DOWN for some period during
    # the game. If disabled, no machine will go DOWN.
    random-machine-down-times: true
    random-machine-setup: true
    random-orders: true
    random-storage: true
    restore-gamestate:
      enable: false
      phase: PRODUCTION
    # load data from latest game report with a given name
    # leave empty to always load from latest stored report
    load-from-report: "GraspingChallenge"
    # store game report under a name for later reference
    store-to-report: ""

  challenges:
    # enable: false
    enable: true
    name: "BABYTIGERS_GRASPING_MID_1"
    # max is 7 x 8
    field:
      width: 5
      height: 5
      # if true this effectively doubles the field size
      mirror: false
    # Phases in which the machine positions are broadcasted
    send-mps-ground-truth: [PRODUCTION]

    production-time: 1020
    orders:
      # if disabled, use default orders from rcll
      customize: true
      # each order is named O<INTEGER>
      O1:
        base-color: BASE_RED
        ring-colors: [RING_BLUE, RING_YELLOW, RING_ORANGE]
        cap-color: CAP_BLACK
    publish-routes:
      enable: false
      num-points: 12
      num-routes: 1
      pause-duration: 5

      # orders are randomized according to the given spec
    machines: [BS, CS1]
    machine-setup:
      customize: true
      rs1-colors: [RING_BLUE, RING_YELLOW]
      rs2-colors: [RING_ORANGE, RING_GREEN]
      ring-specs:
        RING_BLUE: 1
        RING_YELLOW: 0
        RING_ORANGE: 2
        RING_GREEN: 0

  shell:
    refbox-host: localhost
    refbox-port: 4444

  workpiece-tracking:
    enable: false
    fail-safe: true
    broadcast: false

  # A requested delivery in the real world needs to be confirmed 'manually' by
  # the referee before scoring. In simulation this might be tedious and
  # unnecessary. 'Automatic' confirmation grants all delivery requests.
  auto-confirm-delivery: true

  simulation:
    enable: false

    # factor by which the game time should elapse per second. Also affects
    # mockup machine process durations. However, every single step will
    # take at least 1s (2s in case of the delvery station) to prevent
    # unobservable state changes.
    speedup: 1.0

    # Disable in case machine feedback from the slides is unavailable (e.g.,
    # if one ring station is unresponsive)
    #
    # Slide counters of ring stations listed here will increment the slide
    # counter whenever a payment is due.
    #
    # This also implicates for all listed machines that:
    #   1. Rings can be mounted without payment and the refbox awards additional
    #      points as if the payment was actually made
    #   2. Points for payments are only given, if they are used afterwards.
    #
    # To register a machine for this behavior, enter its full mane, e.g., to
    # add all ring stations simply use:
    disable-base-payment-check: [C-RS1, C-RS2, M-RS1, M-RS2]
    # disable-base-payment-check: []

    # synchronize refbox time with the time of a simulation
    time-sync:
      enable: true
      # estimate time by using the last given simulation time speed
      # (helps reducing the amount of messages to send)
      estimate-time: true

  webshop:
    enable: true

  websocket:
    # true if accepting websocket clients, not tcp socket clients
    ws-mode: true
    # tcp port under wihc it will be accessible
    port: 1234
    # allow all connected clients to send control commands to CLIPS env
    allow-control-all: true


webview:
  # TCP port for Webview HTTP requests; TCP port
  port: !tcp-port 8088

  # True to allow client side caching. Typically you want this disabled
  # to force proper reloads each time with fresh data.
  client_side_caching: false


  # cross-origin resource sharing (CORS)
  # This concerns requests where the web app does not originate from
  # the same server as the URL requested. An example is running the
  # webview frontend locally in development mode or to access multiple
  # robots from one interface.
  #
  # Modern browsers will only process resources if the server allows
  # access through the Access-Control-Allow-Origin header.
  # cf https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
  # or https://enable-cors.org/
  cors:
    allow:
      # Allow all access, sets header to '*'
      all: true
      # Allow access only from specific domains
      # origins: ["http://localhost:4200"]

    # time to allow clients to cache our response
    max-age: 86400

  # libmicrohttpd thread pool settings
  # Using a thread pool allows for the concurrent processing of
  # incoming requests and should generally be enabled.
  thread-pool:
    enable: true
    num-threads: 8

  # For the given URLs, a handler will be configured that captures
  # requests if no other handler is registered, i.e., the actual
  # plugin handling these requests has not been loaded.
  # If this is not a user-facing page, but rather an endpoint ingested
  # by some program, this may provide better feedback.
  # For user pages, with the appropriate catchall above, we always
  # serve the UI and it will do something useful.
  explicit-404:
    - /metrics
    - /xmlrpc

  network:

    # Enable or disable IPv4 or IPv6 server port

    # Set "listen" value to bind to a specific IP address of the
    # host, rather than to "any" address, example shows how to bind
    # for connections from the local host only
    ipv4:
      enable: true
      # listen: !ipv4 127.0.0.1

    ipv6:
      enable: true
      # listen: !ipv6 "::1"
